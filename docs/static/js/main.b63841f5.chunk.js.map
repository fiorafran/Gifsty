{"version":3,"sources":["hooks/getGifs.js","components/GifGrid/styles.js","components/GifGrid/GifGrid.js","components/Search/styles.js","components/Search/Search.js","styles.js","GifstyApp.js","reportWebVitals.js","index.js"],"names":["getGifs","category","a","parseCategory","replace","console","log","url","fetch","res","json","data","gifs","map","image","id","title","images","downsized_medium","Wrapper","styled","div","SearchTitle","h3","GifWrapper","theme","bgColor","ImageTitle","p","Image","img","GifGrid","useState","setImages","useEffect","then","src","alt","Form","form","InputWrapper","SearchInput","input","inputBg","inputColor","Span","span","width","spanColor","Search","value","setValue","setCategory","onSubmit","e","preventDefault","type","onChange","target","placeholder","length","cat","RadioWrapper","RadioLabel","label","RadioInput","MainWrapper","Color","AppTitle","h2","GlobalCss","createGlobalStyle","GifstyApp","setBgColor","handlebgColor","ev","onClick","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b63841f5.chunk.js","sourcesContent":["export const getGifs = async(category) => {\n    const parseCategory = category.replace(/\\s/g, '+');\n    console.log('parse ', parseCategory);\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=OBRjMT5IxKXzteX4ohkxC1NlH3uI4PdI&q=${parseCategory}&limit=15&offset=0&rating=g&lang=es`;\n    const res = await fetch(url);\n    const { data } = await res.json();\n\n    const gifs = data.map(image => {\n        return {\n            id: image.id,\n            title: image.title,\n            url: image.images.downsized_medium.url\n        }\n    })\n    console.log(gifs)\n    return gifs;\n};","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    transition: all .5s ease-in-out;\n    justify-content: center;\n    margin-bottom: 3em;\n`;\n\nexport const SearchTitle = styled.h3`\n    text-align: left;\n    padding: 0em 0px 0.7em 1em;\n    border-bottom: 2px solid #e3e3e3;\n    width: 90vw;\n    margin: 20px auto;\n`;\nexport const GifWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    border: 2px solid #d7d7d7;\n    border-radius: 10px;\n    margin: 10px;\n    overflow: hidden;\n    transition: all .3s ease-in-out;\n\n    &:hover {\n        box-shadow: 8px 8px 1px 0px ${({ theme }) => theme.bgColor === 'black' ? 'rgb(255 255 255)' : 'rgb(0 0 0 / 75%)'}\n    }\n`;\nexport const ImageTitle = styled.p`\n    text-align: center;\n`;\nexport const Image = styled.img`\n    max-height: 200px;\n    min-width: 250px;\n    transition: all .5s ease-in-out;\n    @media (max-width: 600px) {\n        max-width: 355px;\n    }\n`;","import React, { useEffect, useState } from 'react'\nimport { getGifs } from '../../hooks/getGifs'\nimport { Wrapper, SearchTitle, GifWrapper, ImageTitle, Image } from './styles'\n\nexport const GifGrid = ({category, theme}) => {\n    const [images, setImages] = useState([])\n    useEffect(() => {\n        getGifs(category).then(setImages)\n    }, [category])\n\n    return (\n        <>\n            <SearchTitle>{category}</SearchTitle>\n            <Wrapper>\n                {images && images.map(({ id, title, url }) => {\n                    return (\n                        <GifWrapper key={id} theme={theme}>\n                            <ImageTitle>{title}</ImageTitle>\n                            <Image src={url} alt={title}/>\n                        </GifWrapper>)\n                })}\n            </Wrapper>\n        </>\n    )\n}\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    margin: auto;\n`;\n\nexport const InputWrapper = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const SearchInput = styled.input`\n    background-color: ${({ theme }) => theme.inputBg};\n    color: ${({ theme }) => theme.inputColor};\n    margin: 15px auto 0 auto;\n    width: 22vw;\n    height: 3vh;\n    font-size: 20px;\n    outline: none;\n    border: 0;\n    border-bottom: 1px solid #c7c7c7;\n    text-align: center;\n    @media (max-width: 600px) {\n        width: 60vw;\n        margin: 25px auto 0 auto;\n    }\n`;\n\nexport const Span = styled.span`\n    width: ${({ width }) => width < 22.6 ? width : 22.6 || 0}vw;\n    height: 5px;\n    background-color: ${({ theme }) => theme.spanColor};\n    display: block;\n    transition: width .5s ease;\n    @media (max-width: 600px) {\n        width: ${({ width }) => width * 2.5 < 60.6 ? width * 2.5 : 60.6 || 0}vw;\n    }\n`;","import React, { useState } from 'react'\nimport { GifGrid } from '../GifGrid/GifGrid';\nimport { Form, InputWrapper, SearchInput, Span } from './styles'\n\nexport const Search = ({ theme }) => {\n    const [value, setValue] = useState('');\n    const [category, setCategory] = useState('');\n\n    const handleChange = (e) => setValue(e.target.value);\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setCategory([value, ...category])\n    };\n\n    return (\n            <Form onSubmit={handleSubmit}>\n                <InputWrapper>\n                    <SearchInput type=\"text\" onChange={ handleChange } value={ value } placeholder='Buscar Gif' theme={theme}/>\n                    <Span width={value.length} theme={theme} />\n                </InputWrapper>\n                {category && category.map(cat => <GifGrid key={cat} category={cat} theme={theme}/>)}\n            </Form>\n    )\n}\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const RadioWrapper = styled.div`\n    display: flex;\n    position: absolute;\n    right: 1em;\n    top: 0.5em;\n    @media (max-width: 600px) {\n        right: 5.8em;\n        top: 3em; \n    }\n    `;\n\nexport const RadioLabel = styled.label`\n    display: flex;\n    flex-direction: row-reverse\n`;\nexport const RadioInput = styled.input`\n    margin-top: 4px;\n`;\n\nexport const MainWrapper = styled.div`\nmargin: 0;\nbackground-color: ${({ theme }) => theme.bgColor};\ncolor: ${({ theme }) => theme.Color};\n`;\n\nexport const AppTitle = styled.h2`\ntext-align: center;\nwidth: 50vw;\npadding: 5px; \nborder-bottom: 2px solid #ccc;\nmargin: 0 auto 1em auto;\n`;\nexport const GlobalCss = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css2?family=Readex+Pro:wght@400;500;600&display=swap');\n    body {\n        background-color: ${({ theme }) => theme.bgColor};\n        color: ${({ theme }) => theme.Color};\n        margin: 0;\n        font-family: 'Readex Pro', sans-serif;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n`;","import { useState } from 'react';\nimport { Search } from './components/Search/Search';\nimport { RadioWrapper, MainWrapper, AppTitle, RadioLabel, RadioInput, GlobalCss } from './styles';\n\nconst GifstyApp = () => {\n\n  const [bgColor, setBgColor] = useState('white');\n  const handlebgColor = ev => setBgColor(ev.target.value);\n\n  const theme = {\n    bgColor: bgColor,\n    Color: bgColor === 'white' ? 'black': 'white',\n    inputBg: bgColor,\n    inputColor: bgColor !== 'white' ? 'white' : 'black',\n    spanColor: bgColor === '#7900FF' ? 'white' : '#7900FF'\n  }\n\n  return (\n    <MainWrapper theme={theme}>\n      <GlobalCss theme={theme} />\n      <RadioWrapper>\n        <RadioLabel onClick={handlebgColor}>\n          White\n          <RadioInput type=\"radio\" name=\"radioColor\" value='white'/>\n        </RadioLabel>\n        <RadioLabel onClick={handlebgColor}>\n          Black\n          <RadioInput type=\"radio\" name=\"radioColor\" value='black'/>\n        </RadioLabel>\n        <RadioLabel onClick={handlebgColor}>\n          Purple\n          <RadioInput type=\"radio\" name=\"radioColor\" value='#7900FF'/>\n        </RadioLabel>\n      </RadioWrapper>\n      <AppTitle>Gifsty</AppTitle>\n      <Search theme={theme} />\n    </MainWrapper>\n  );\n}\n\nexport default GifstyApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifstyApp from './GifstyApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifstyApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}